image: node:11-alpine

variables:
  ENV: development
  POSTGRES_DB: rechat
  POSTGRES_USER: rechat
  POSTGRES_PASSWORD: rechat
  DATABASE_URL: "postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres/$POSTGRES_DB"
  REDIS_URL: "redis://redis:6379"
  CONTAINER_IMAGE: registry.gitlab.com/rechat/server:$CI_COMMIT_REF_NAME

docker:
  stage: build
  only:
    - master
    - testing
    - develop

  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build -t $CONTAINER_IMAGE .
    - docker push $CONTAINER_IMAGE

modules:
  stage: build
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
  script:
    - apk --no-cache --update add git python build-base
    - NODE_ENV="$ENV" npm install
  tags:
    - docker

lint:
  stage: test
  dependencies:
    - modules
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull

  script: npx eslint .
  tags:
    - docker

coverage:
  stage: test
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull
  dependencies:
    - modules
  services:
    - alias: postgres
      name: mdillon/postgis:10
    - alias: redis
      name: redis:latest
  script:
    - apk --no-cache --update add git python build-base postgresql-client
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - psql -h "postgres" -U "$POSTGRES_USER" "$POSTGRES_DB" < ./data/minimal.sql
    - NODE_ENV="$ENV" npm install
    - npm run coverage
  coverage: '/Lines\s+:\s([\d\.]+)/'
  artifacts:
    paths:
      - istanbul
      - docs
  tags:
    - docker

unit_coverage:
  stage: test
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull
  dependencies:
    - modules
  services:
    - alias: postgres
      name: mdillon/postgis:10
    - alias: redis
      name: redis:latest
  script:
    - apk --no-cache --update add git python build-base postgresql-client
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - psql -h "postgres" -U "$POSTGRES_USER" "$POSTGRES_DB" < ./data/minimal.sql
    - NODE_ENV="$ENV" npm install
    - export ORIGINAL_NODE_ENV=production
    - export NODE_ENV=tests
    - npm run migrate:up
    - npm run coverage:unit
  coverage: '/Lines\s+:\s([\d\.]+)/'
  artifacts:
    paths:
      - istanbul
      - docs
  tags:
    - docker

docs:
  stage: deploy
  image: node:11-alpine
  only:
    - master
    - testing
    - develop

  dependencies:
    - modules
    - coverage
  cache:
    key: docs
    paths:
      - node_modules/
    policy: pull
  script:
    # Based on aglio#272 we install it wit no optional dependencies
    # otherwise it will be build with protagonist which takes long to compile
    - apk --no-cache --update add git python build-base
    - NODE_ENV="$ENV" npm install
    - npm install aglio --no-optional
    - node api_docs/index.js -o
  after_script:
    - apk --no-cache --update add ca-certificates wget
    - wget https://dl.minio.io/client/mc/release/linux-amd64/mc
    - chmod +x mc
    - ./mc config host add rechat https://minio.rechat.com "$MINIO_ACCESS_KEY" "$MINIO_SECRET_KEY"
    - ./mc cp --recursive docs/ rechat/docs/$CI_COMMIT_REF_NAME
  tags:
    - docker
